//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NSEmbroidery.UI.Embroidery {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Settings", Namespace="http://schemas.datacontract.org/2004/07/NSEmbroidery.Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Drawing.Bitmap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Drawing.Image))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Drawing.Color))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Drawing.Color[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Drawing.Color, char>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(char[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<NSEmbroidery.UI.Embroidery.Resolution, int>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(NSEmbroidery.UI.Embroidery.GridType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(NSEmbroidery.UI.Embroidery.Palette))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(NSEmbroidery.UI.Embroidery.Resolution))]
    public partial class Settings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CellsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoefficientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<System.Drawing.Color, char> ColorSymbolRelationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object DecoratorsCompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NSEmbroidery.UI.Embroidery.GridType GridTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NSEmbroidery.UI.Embroidery.Palette PaletteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Color SymbolColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char[] SymbolsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CellsCount {
            get {
                return this.CellsCountField;
            }
            set {
                if ((this.CellsCountField.Equals(value) != true)) {
                    this.CellsCountField = value;
                    this.RaisePropertyChanged("CellsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Coefficient {
            get {
                return this.CoefficientField;
            }
            set {
                if ((this.CoefficientField.Equals(value) != true)) {
                    this.CoefficientField = value;
                    this.RaisePropertyChanged("Coefficient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.Drawing.Color, char> ColorSymbolRelation {
            get {
                return this.ColorSymbolRelationField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorSymbolRelationField, value) != true)) {
                    this.ColorSymbolRelationField = value;
                    this.RaisePropertyChanged("ColorSymbolRelation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object DecoratorsComposition {
            get {
                return this.DecoratorsCompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.DecoratorsCompositionField, value) != true)) {
                    this.DecoratorsCompositionField = value;
                    this.RaisePropertyChanged("DecoratorsComposition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NSEmbroidery.UI.Embroidery.GridType GridType {
            get {
                return this.GridTypeField;
            }
            set {
                if ((this.GridTypeField.Equals(value) != true)) {
                    this.GridTypeField = value;
                    this.RaisePropertyChanged("GridType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NSEmbroidery.UI.Embroidery.Palette Palette {
            get {
                return this.PaletteField;
            }
            set {
                if ((object.ReferenceEquals(this.PaletteField, value) != true)) {
                    this.PaletteField = value;
                    this.RaisePropertyChanged("Palette");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Color SymbolColor {
            get {
                return this.SymbolColorField;
            }
            set {
                if ((this.SymbolColorField.Equals(value) != true)) {
                    this.SymbolColorField = value;
                    this.RaisePropertyChanged("SymbolColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char[] Symbols {
            get {
                return this.SymbolsField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolsField, value) != true)) {
                    this.SymbolsField = value;
                    this.RaisePropertyChanged("Symbols");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Palette", Namespace="http://schemas.datacontract.org/2004/07/NSEmbroidery.Core")]
    [System.SerializableAttribute()]
    public partial class Palette : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Drawing.Color[] colorsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Drawing.Color[] colors {
            get {
                return this.colorsField;
            }
            set {
                if ((object.ReferenceEquals(this.colorsField, value) != true)) {
                    this.colorsField = value;
                    this.RaisePropertyChanged("colors");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Resolution", Namespace="http://schemas.datacontract.org/2004/07/NSEmbroidery.Core")]
    [System.SerializableAttribute()]
    public partial class Resolution : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int Heightk__BackingFieldField;
        
        private int Widthk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Height>k__BackingField", IsRequired=true)]
        public int Heightk__BackingField {
            get {
                return this.Heightk__BackingFieldField;
            }
            set {
                if ((this.Heightk__BackingFieldField.Equals(value) != true)) {
                    this.Heightk__BackingFieldField = value;
                    this.RaisePropertyChanged("Heightk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Width>k__BackingField", IsRequired=true)]
        public int Widthk__BackingField {
            get {
                return this.Widthk__BackingFieldField;
            }
            set {
                if ((this.Widthk__BackingFieldField.Equals(value) != true)) {
                    this.Widthk__BackingFieldField = value;
                    this.RaisePropertyChanged("Widthk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GridType", Namespace="http://schemas.datacontract.org/2004/07/NSEmbroidery.Core")]
    public enum GridType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SolidLine = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Points = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Embroidery.IEmbroideryCreatorService")]
    public interface IEmbroideryCreatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmbroideryCreatorService/GetEmbroidery", ReplyAction="http://tempuri.org/IEmbroideryCreatorService/GetEmbroideryResponse")]
        System.Drawing.Bitmap GetEmbroidery(System.Drawing.Bitmap input, NSEmbroidery.UI.Embroidery.Settings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmbroideryCreatorService/GetEmbroidery", ReplyAction="http://tempuri.org/IEmbroideryCreatorService/GetEmbroideryResponse")]
        System.Threading.Tasks.Task<System.Drawing.Bitmap> GetEmbroideryAsync(System.Drawing.Bitmap input, NSEmbroidery.UI.Embroidery.Settings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmbroideryCreatorService/PossibleResolutionsCount", ReplyAction="http://tempuri.org/IEmbroideryCreatorService/PossibleResolutionsCountResponse")]
        System.Collections.Generic.Dictionary<NSEmbroidery.UI.Embroidery.Resolution, int> PossibleResolutionsCount(System.Drawing.Bitmap image, int cellsCount, int countResolutions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmbroideryCreatorService/PossibleResolutionsCount", ReplyAction="http://tempuri.org/IEmbroideryCreatorService/PossibleResolutionsCountResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<NSEmbroidery.UI.Embroidery.Resolution, int>> PossibleResolutionsCountAsync(System.Drawing.Bitmap image, int cellsCount, int countResolutions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmbroideryCreatorService/PossibleResolutions", ReplyAction="http://tempuri.org/IEmbroideryCreatorService/PossibleResolutionsResponse")]
        System.Collections.Generic.Dictionary<NSEmbroidery.UI.Embroidery.Resolution, int> PossibleResolutions(System.Drawing.Bitmap image, int cellsCount, int minCoefficient, int maxCoefficient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmbroideryCreatorService/PossibleResolutions", ReplyAction="http://tempuri.org/IEmbroideryCreatorService/PossibleResolutionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<NSEmbroidery.UI.Embroidery.Resolution, int>> PossibleResolutionsAsync(System.Drawing.Bitmap image, int cellsCount, int minCoefficient, int maxCoefficient);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmbroideryCreatorServiceChannel : NSEmbroidery.UI.Embroidery.IEmbroideryCreatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmbroideryCreatorServiceClient : System.ServiceModel.ClientBase<NSEmbroidery.UI.Embroidery.IEmbroideryCreatorService>, NSEmbroidery.UI.Embroidery.IEmbroideryCreatorService {
        
        public EmbroideryCreatorServiceClient() {
        }
        
        public EmbroideryCreatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmbroideryCreatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmbroideryCreatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmbroideryCreatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Drawing.Bitmap GetEmbroidery(System.Drawing.Bitmap input, NSEmbroidery.UI.Embroidery.Settings settings) {
            return base.Channel.GetEmbroidery(input, settings);
        }
        
        public System.Threading.Tasks.Task<System.Drawing.Bitmap> GetEmbroideryAsync(System.Drawing.Bitmap input, NSEmbroidery.UI.Embroidery.Settings settings) {
            return base.Channel.GetEmbroideryAsync(input, settings);
        }
        
        public System.Collections.Generic.Dictionary<NSEmbroidery.UI.Embroidery.Resolution, int> PossibleResolutionsCount(System.Drawing.Bitmap image, int cellsCount, int countResolutions) {
            return base.Channel.PossibleResolutionsCount(image, cellsCount, countResolutions);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<NSEmbroidery.UI.Embroidery.Resolution, int>> PossibleResolutionsCountAsync(System.Drawing.Bitmap image, int cellsCount, int countResolutions) {
            return base.Channel.PossibleResolutionsCountAsync(image, cellsCount, countResolutions);
        }
        
        public System.Collections.Generic.Dictionary<NSEmbroidery.UI.Embroidery.Resolution, int> PossibleResolutions(System.Drawing.Bitmap image, int cellsCount, int minCoefficient, int maxCoefficient) {
            return base.Channel.PossibleResolutions(image, cellsCount, minCoefficient, maxCoefficient);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<NSEmbroidery.UI.Embroidery.Resolution, int>> PossibleResolutionsAsync(System.Drawing.Bitmap image, int cellsCount, int minCoefficient, int maxCoefficient) {
            return base.Channel.PossibleResolutionsAsync(image, cellsCount, minCoefficient, maxCoefficient);
        }
    }
}
